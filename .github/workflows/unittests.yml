 name: Continuous Integration
 
 on:
   push:
     branches:
       - '*'
   pull_request:
     branches:
       - '*'
   schedule:
       - cron: '59 23 * * *'

 jobs:
   unittests:
     name: CI (${{ matrix.os }}-${{ matrix.environment-file }})
     runs-on: ${{ matrix.os }}
     continue-on-error: ${{ matrix.experimental }}
     timeout-minutes: 90 
     strategy:
       matrix:
         os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
         environment-file: [.ci/37.yml, .ci/38.yml, .ci/39.yml]
         experimental: [false]
     
     steps:
       - name: checkout repo
         uses: actions/checkout@v2
       
       - name: setup micromamba
         uses: mamba-org/provision-with-micromamba@main
         with:
           environment-file: ${{ matrix.environment-file }}
           micromamba-version: 'latest'
     
     
       - name: install geosnap - bash
         shell: bash -l {0}
         run: pip install -e . --no-deps --force-reinstall
         if: matrix.os != 'windows-latest'
       
       - name: install geosnap - powershell
         shell: powershell
         run: pip install -e . --no-deps --force-reinstall
         if: matrix.os == 'windows-latest'
      
      
       - name: download data - bash
         shell: bash -l {0}
         run: python geosnap/tests/_dl_data.py
         env:
           COMBO_DATA: ${{ secrets.COMBO_DATA }}
         if: matrix.os != 'windows-latest'
      
       - name: download data - powershell
         shell: powershell
         run: python geosnap/tests/_dl_data.py
         env:
           COMBO_DATA: ${{ secrets.COMBO_DATA }}
         if: matrix.os == 'windows-latest'
       
       
       - name: run tests - bash
         shell: bash -l {0}
         run: pytest -v geosnap --cov=geosnap --cov-report=xml
         env:
           LTDB_SAMPLE: ${{ secrets.COMBO_DATA }} # check whether we can pull secrets
           LTDB_FULL: ${{ secrets.COMBO_DATA }}
           NCDB: ${{ secrets.COMBO_DATA }}
         if: matrix.os != 'windows-latest'
       
       - name: run tests - powershell
         shell: powershell
         run: pytest -v geosnap --cov=geosnap --cov-report=xml
         env:
           LTDB_SAMPLE: ${{ secrets.COMBO_DATA }} # check whether we can pull secrets
           LTDB_FULL: ${{ secrets.COMBO_DATA }}
           NCDB: ${{ secrets.COMBO_DATA }}
         if: matrix.os == 'windows-latest'
       
       
       - name: codecov
         uses: codecov/codecov-action@v1
         with:
           token: ${{ secrets.CODECOV_TOKEN }}
           file: ./coverage.xml
           name: geosnap-codecov
       
       
       - name: notebook tests - bash
         if: ${{ env.COMBO_DATA }} && matrix.os != 'windows-latest'
         shell: bash -l {0}
         run: jupyter nbconvert --to notebook --execute --inplace --ExecutePreprocessor.timeout=-1 --ExecutePreprocessor.kernel_name=python3 examples/*.ipynb;
         
       - name: notebook tests - powershell
         if: ${{ env.COMBO_DATA }} && matrix.os == 'windows-latest'
         shell: powershell
         run: jupyter nbconvert --to notebook --execute --inplace --ExecutePreprocessor.timeout=-1 --ExecutePreprocessor.kernel_name=python3 examples/*.ipynb;
